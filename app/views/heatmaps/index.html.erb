<div id="welcome" title="National Eyeball">
  <p><i>Made by The Kranzky Brothers for GovHack 2014.</i></p>
  <p>Please <b><a href="http://hackerspace.govhack.org/content/national-eyeball" target="_gh14">vote for us in the people's choice awards</a></b>. Thank!</p>
</div>
<div id="menu">
  <div id="twitter"><a href="https://twitter.com/share" class="twitter-share-button" data-size="large" data-url="http://australian.govdata.exposed" data-hashtags="govhack">Tweet</a></div>
  <div id="vote"><img src="vote.png" alt="Vote Now!"></div>
  <div id="dropdown">
    <select id="regional">
      <option value="Perth">Perth</option>
      <option value="Adelaide">Adelaide</option>
      <option value="Melbourne">Melbourne</option>
      <option value="Hobart">Hobart</option>
      <option value="Canberra">Canberra</option>
      <option value="Sydney">Sydney</option>
      <option value="Brisbane">Brisbane</option>
      <option value="Darwin">Darwin</option>
    </select>
  </div>
</div>
<div id="controls">
</div>
<div class="map">
  <div id="widget"></div>
</div>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
<script>
  HeatMap = {};
  HeatMap.dirty = false;
  HeatMap.instances = [];

  MAP_STYLES = [{"featureType":"landscape","stylers":[{"saturation":-100},{"lightness":65},{"visibility":"on"}]},{"featureType":"poi","stylers":[{"saturation":-100},{"lightness":51},{"visibility":"simplified"}]},{"featureType":"road.highway","stylers":[{"saturation":-100},{"visibility":"simplified"}]},{"featureType":"road.arterial","stylers":[{"saturation":-100},{"lightness":30},{"visibility":"on"}]},{"featureType":"road.local","stylers":[{"saturation":-100},{"lightness":40},{"visibility":"on"}]},{"featureType":"transit","stylers":[{"saturation":-100},{"visibility":"simplified"}]},{"featureType":"administrative.province","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"on"},{"lightness":-25},{"saturation":-100}]},{"featureType":"water","elementType":"geometry","stylers":[{"hue":"#ffff00"},{"lightness":-25},{"saturation":-97}]}];

  if (_.isUndefined(localStorage.heatmap)) {
    localStorage.heatmap = "{}";
  }

  HeatMap.state = JSON.parse(localStorage.heatmap);

  if (_.isUndefined(HeatMap.state.bounds)) {
    HeatMap.state.bounds = [0, 0, 0, 0];
  }
  if (_.isUndefined(HeatMap.state.view)) {
    HeatMap.state.view = "Sydney";
  }
  if (_.isUndefined(HeatMap.state.welcomed)) {
    HeatMap.state.welcomed = false;
  }
  if (_.isUndefined(HeatMap.state.locality)) {
    HeatMap.state.locality = HeatMap.state.view;
  }
  if (_.isUndefined(HeatMap.state.filters)) {
    HeatMap.state.filters = [
      {
        id: 105,
        color: [255, 0, 0],
        visible: true
      },
      {
        id: 220,
        color: [0, 0, 255],
        visible: true
      }
    ];
  };

  query = $(location).attr('search').split("?q=")[1];
  if (!_.isUndefined(query)) {
    state = _.map(query.split("+"), function(elem){ return parseFloat(elem); });
    HeatMap.state.center = state.splice(0, 2);
    HeatMap.state.zoom = state.shift();
    HeatMap.state.filters = [];
    while (state.length > 0) {
      HeatMap.state.filters.push({
        id: state.shift(),
        color: state.splice(0, 3)
      });
    }
  }

  ZOOMS = {
    "Perth": new google.maps.LatLng(-31.95813703280552, 115.84910964965819),
    "Adelaide": new google.maps.LatLng(-34.92684662040393, 138.58869934082028),
    "Melbourne": new google.maps.LatLng(-37.816343235871784, 144.9589729309082),
    "Hobart": new google.maps.LatLng(-42.88893306658847, 147.2892639160157),
    "Canberra": new google.maps.LatLng(-35.28273091883469, 149.12591361999515),
    "Sydney": new google.maps.LatLng(-33.86726011483213, 151.20101547241214),
    "Brisbane": new google.maps.LatLng(-27.471356170884754, 153.02334594726562),
    "Darwin": new google.maps.LatLng(-12.450962709515238, 130.81991271972655)
  }

  map_options = {
    panControl: false,
    zoomControl: true,
    mapTypeControl: false,
    scaleControl: false,
    streetViewControl: false,
    overviewMapControl: false,
    scrollwheel: false,
    zoomControlOptions: {
      style: google.maps.ZoomControlStyle.LARGE,
      position: google.maps.ControlPosition.RIGHT_CENTER
    },
    styles: MAP_STYLES
  };

  function stateful_uri() {
    state = _.flatten([HeatMap.state.center, HeatMap.state.zoom, _.map(HeatMap.state.filters, function(f){ return [f.id, f.color]; })]).join("+");
    return "http://australian.govdata.exposed?q="+state;
  }

  function re_tweet() {
    var tweet = $('<a>')
        .attr('href', "https://twitter.com/share")
        .attr('class', "twitter-share-button")
        .attr('data-size', "large")
        .attr('data-hashtags', "govhack")
        .attr('data-counturl', "http://australian.govdata.exposed")
        .text('Tweet');
    $(".twitter-share-button").remove();
    $("#twitter").prepend(tweet);
    tweet.attr('data-text', HeatMap.state.locality + ": " + _.map(HeatMap.comments, function(item){ return item.comment }).join(" vs. "));
    tweet.attr('data-url', stateful_uri());
    twttr.widgets.load();
  }

  function update_bounds() {
    if (!HeatMap.dirty) {
      return;
    }
    HeatMap.dirty = false;
    HeatMap.state.bounds[0] = map.getBounds().getSouthWest().lat();
    HeatMap.state.bounds[1] = map.getBounds().getSouthWest().lng();
    HeatMap.state.bounds[2] = map.getBounds().getNorthEast().lat();
    HeatMap.state.bounds[3] = map.getBounds().getNorthEast().lng();
    HeatMap.state.zoom = map.zoom;
    HeatMap.state.center = [map.center.lat(), map.center.lng()];
    redraw_heatmaps(false);
  }

  function display_heatmaps(reorder) {
    ranking = {};
    _.each(HeatMap.points, function(data, index){
      filter = HeatMap.state.filters[index];
      priority = data.priority;
      if (data.type == 'bool') {
        priority = -1;
      }
      ranking[priority] = index;
      if (_.isUndefined(HeatMap.instances[index])) {
        HeatMap.instances[index] = new google.maps.visualization.HeatmapLayer({
          map: null,
          dissipating: false,
          maxIntensity: 1.0
        });
        gradient = [];
        _.times(14, function(i){
          c = filter.color;
          a = i/13.0;
          gradient.push("rgba("+c[0]+","+c[1]+","+c[2]+","+a+")");
        });
        HeatMap.instances[index].set('gradient', gradient);
      }
      heatmap = HeatMap.instances[index];
      if (filter.visible) {
        points = _.map(data.points, function(point){
          if (data.type == 'bool') {
            return new google.maps.LatLng(point.lat,point.lng);
          } else {
            return {
              location: new google.maps.LatLng(point.lat,point.lng),
              weight: point.weight
            }
          }
        });
        heatmap.setData(points);
        if (_.isNull(heatmap.map)) {
          reorder = true;
        }
      } else {
        if (!_.isNull(heatmap.map)) {
          heatmap.setMap(null);
        }
      }
    });
    order = _.sortBy(_.keys(ranking), function(priority) { return parseFloat(priority); });
    order.reverse();
    if (reorder) {
      _.each(HeatMap.instances, function(heatmap, index){
        heatmap.setMap(null);
      });
      _.each(order, function(priority){
        index = ranking[priority];
        heatmap = HeatMap.instances[index];
        filter = HeatMap.state.filters[index];
        if (filter.visible) {
          heatmap.setMap(map);
        }
      });
    }
    radius = 0.005;
    if (map.zoom > 10) {
      radius -= (map.zoom-10)*0.001;
      if (radius <= 0) {
        radius = 0.0005;
      }
    }
    attenuation = 1.0;
    if (map.zoom > 12) {
      attenuation = (21 - map.zoom) / 9.0;
    }
    opacity = 0.9;
    _.each(order, function(priority){
      index = ranking[priority];
      heatmap = HeatMap.instances[index];
      filter = HeatMap.state.filters[index];
      data = HeatMap.points[index];
      if (data.type == 'bool') {
        heatmap.set('radius', radius * attenuation * 0.7);
        heatmap.set('opacity', attenuation);
      } else {
        heatmap.set('radius', 0.03);
        heatmap.set('opacity', opacity * attenuation);
        opacity *= 0.5;
      }
    });
  }

  function display_comments() {
    _.each($("#controls h3 .count"), function(elem, index){
      $(elem).text(HeatMap.comments[index].count);
    });
    _.each($("#controls div.title"), function(elem, index){
      $(elem).text(HeatMap.comments[index].comment);
    });
  }

  function redraw_heatmaps(reorder) {
    localStorage.heatmap = JSON.stringify(HeatMap.state);
    if (HeatMap.state.filters.length > 0) {
      params = {
        bounds: HeatMap.state.bounds,
        filters: _.map(HeatMap.state.filters, function(f){ return f.id; })
      };
      $.getJSON("heatmaps/points", params, function(data){
        HeatMap.points = data;
        display_heatmaps(reorder);
      });
      $.getJSON("heatmaps/comments", params, function(data){
        HeatMap.comments = data;
        display_comments();
        service.nearbySearch({ bounds: map.getBounds() }, function(results, status) {
          counts = {}
          max = 0;
          HeatMap.state.locality = "Eyeball";
          _.each(results, function(result){
            if (!_.isUndefined(result.vicinity)) {
              name = result.vicinity.split(', ').pop();
              if (_.isUndefined(counts[name])) {
                counts[name] = 0;
              }
              counts[name] += 1;
              if (counts[name] > max) {
                HeatMap.state.locality = name;
                max = counts[name];
              }
            }
          });
          $("#dropdown .ui-selectmenu-text").text(HeatMap.state.locality);
          re_tweet();
        })
      });
    }
  }

  function initialize() {
    $.getJSON("heatmaps/filters", function(data){
      HeatMap.controls = data;
      restore_state();
    });
    _.each(HeatMap.state.filters, function(filter, index){
      if (_.isUndefined(filter.visible)) {
        filter.visible = true;
      }
      checked = '';
      if (filter.visible) {
        checked='checked ';
      }
      $("#controls").append('<div class="title">...</div><h3><span class="count">...</span><input class="show" data-index='+index+' type="checkbox" '+checked+'/></h3><div class="options" data-index='+index+'><select class="source"></select><select class="property"></select><select class="measure"></select></div>');
    });
        
    $("#controls input.show").click(function(event) {
      HeatMap.state.filters[$(event.target).data("index")].visible = $(event.target).is(':checked');
      event.stopPropagation();
      localStorage.heatmap = JSON.stringify(HeatMap.state);
      display_heatmaps(false);
    }); 
    $("#controls").accordion({
      active: false,
      header: 'h3',
      collapsible: true,
      heightstyle: "content"
    });
    $("#regional").selectmenu({
      width: 160,
      select: function(event, ui) {
        HeatMap.state.view = ui.item.value;
        localStorage.heatmap = JSON.stringify(HeatMap.state);
        map.setCenter(ZOOMS[HeatMap.state.view]);
        map.setZoom(10);
      }
    });
    $(".source").selectmenu({
      width: 238,
      position: { my: "left+10 top-20", at: "right center" },
      change: function(event, ui) {
        menu = HeatMap.controls.menu[ui.item.value].menu;
        restore_menu($(event.target).siblings(".property"), menu, -1);
        other = $(event.target).siblings(".property").val();
        menu = HeatMap.controls.menu[ui.item.value].menu[other].menu;
        restore_menu($(event.target).siblings(".measure"), menu, -1);
        other = $(event.target).siblings(".measure").val();
        HeatMap.state.filters[$(event.target).parent().data("index")].id = other;
        redraw_heatmaps(true);
      }
    });
    $(".property").selectmenu({
      width: 238,
      position: { my: "left+10 top-20", at: "right center" },
      change: function(event, ui) {
        other = $(event.target).siblings(".source").val();
        menu = HeatMap.controls.menu[other].menu[ui.item.value].menu;
        restore_menu($(event.target).siblings(".measure"), menu, -1);
        other = $(event.target).siblings(".measure").val();
        HeatMap.state.filters[$(event.target).parent().data("index")].id = other;
        redraw_heatmaps(true);
      }
    });
    $(".measure").selectmenu({
      width: 238,
      position: { my: "left+10 top-20", at: "right center" },
      change: function(event, ui) {
        HeatMap.state.filters[$(event.target).parent().data("index")].id = ui.item.value;
        redraw_heatmaps(true);
      }
    });
    $("#welcome").dialog({
      width: 600,
      height: 245,
      modal: true,
      position: { my: "top+52", at: "top", of: window },
      autoOpen: false,
      show: true,
      hide: true,
      draggable: false,
      resizable: false,
      closeOnEscape: true,
      open: function() {
        $("#vote").fadeTo(50, 0.2);
      },
      close: function() {
        HeatMap.state.welcomed = true;
        localStorage.heatmap = JSON.stringify(HeatMap.state);
        $("#vote").fadeTo(300, 1);
      },
      buttons: {
        "OK, I Promise I Will Vote": function() {
          $(this).dialog("close");
        }
      }
    });
    if (!HeatMap.state.welcomed) {
      $("#welcome").dialog("open");
    }
    $("#vote").click(function(event) { 
      $("#welcome").dialog("open");
    });
  }

  function restore_menu(elem, menu, value) {
    elem.empty();
    _.each(menu, function(item, value){
      elem.append($("<option />").val(value).text(item.name));
    });
    if (value < 0) {
      elem.selectmenu("refresh");
      return;
    }
    elem.val(value);
    elem.selectmenu("refresh");
    return menu[value].menu;
  }

  function restore_control(elem, filter) {
    menu = HeatMap.controls.menu;
    context = HeatMap.controls.lookup[filter.id];
    menu = restore_menu(elem.children(".source"), menu, context[0]);
    menu = restore_menu(elem.children(".property"), menu, context[1]);
    restore_menu(elem.children(".measure"), menu, filter.id);
  }

  function restore_state() {
    $("#regional").val(HeatMap.state.view);
    $("#regional").selectmenu("refresh");
    if (_.isUndefined(HeatMap.state.zoom)) {
      map_options.zoom = 10;
    } else {
      map_options.zoom = HeatMap.state.zoom;
    }
    if (_.isUndefined(HeatMap.state.center)) {
      map_options.center = ZOOMS[HeatMap.state.view];
    } else {
      map_options.center = new google.maps.LatLng(HeatMap.state.center[0], HeatMap.state.center[1]);
    }
    map = new google.maps.Map($(".map #widget")[0], map_options);
    service = new google.maps.places.PlacesService(map);
    _.each($("#controls h3 .count"), function(elem, index){
      $(elem).css("color", HeatMap.state.filters[index].color);
    });
    _.each($("#controls div.options"), function(elem, index){
      restore_control($(elem), HeatMap.state.filters[index]);
    });
    $("#menu").show();
    $("#controls").show();
    google.maps.event.addListener(map, 'idle', update_bounds);
    google.maps.event.addListener(map, "bounds_changed", function(){
      HeatMap.dirty = true;
    });
  }

  google.maps.event.addDomListener(window, 'load', initialize);
</script>

<% content_for :head do %>
  <%= javascript_include_tag '//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js' %>
  <%= javascript_include_tag '//ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/jquery-ui.min.js' %>
  <%= javascript_include_tag "//maps.googleapis.com/maps/api/js?libraries=places,geometry,drawing,visualization&sensor=false&key=AIzaSyCl65XtmFvV5XRc8Lw42NC0AFlbl9xjHS0" %>
  <%= javascript_include_tag "//underscorejs.org/underscore-min.js" %>
  <%= stylesheet_link_tag "//ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/themes/smoothness/jquery-ui.css" %>
  <style>
    div.map {
      position: fixed;
      top: 0px;
      left: 0px;
      right: 0px;
      bottom: 0px;
      z-index: 1;
    }
    div#widget {
      width: 100%;
      height: 100%;
      margin: 0px;
    }
    div#controls {
      position: fixed;
      top: 37px;
      left: 0px;
      width: 244px;
      z-index: 666;
      opacity: 0.7;
      display: none;
      overflow-y: scroll;
    }
    div#controls input {
      position: relative;
      top: -20px;
    }
    div#menu {
      position: fixed;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 42px;
      z-index: 666;
      opacity: 0.7;
      display: none;
    }
    div#vote {
      position: fixed;
      left: 0px;
      top: 4px;
      width: 120px;
      height: 42px;
      z-index: 668;
    }
    div#vote img {
      width: 120px;
      height: 40px;
    }
    div#twitter {
      position: fixed;
      left: 124px;
      top: 11px;
      width: 120px;
      z-index: 667;
    }
    div#dropdown {
      position: fixed;
      top: 5px;
      right: 10px;
      z-index: 665;
    }
    span#blurb {
      width: 100%;
    }
    span#red {
      width: 33%;
      background-color: #FAA;
    }
    span#green {
      width: 33%;
      background-color: #AFA;
    }
    span#blue {
      width: 33%;
      background-color: #AAF;
    }
    h3#title {
      position: relative;
      line-height: 0px;
      text-align: center;
      z-index: 666;
    }
    div#controls div.title {
      margin: 15px 0 0 0;
      padding: 7px 0 0 0;
      text-align: center;
      color: white;
      background-color: black;
      font-size: 10px;
      font-weight: bold;
      height: 20px;
      width: 100%;
    }
    div#controls h3 .show {
      top: 2px;
      float: right;
      z-index: 666;
    }
    div#controls h3 .count {
      color: white;
      font-size: 20px;
      font-weight: bold;
      text-shadow: 1px 1px #000000;
    }
    div#controls div.options {
      height: 130px;
      padding: 8px 2px;
    }
    div#welcome {
      display: none;
    }
    .ui-front {
      z-index: 999;
    }
    .ui-dialog-titlebar-close {
      display: none;
    }
    .ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset {
      float: left;
    }
  </style>
<% end %>
